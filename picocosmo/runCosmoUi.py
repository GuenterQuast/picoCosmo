#!/usr/bin/python3
# -*- coding: utf-8 -*-
# script CosmoGui.py
from __future__ import print_function, division, unicode_literals
from __future__ import absolute_import

''' 
  A GUI to control runCosmo.py 

    - select and edit configuration files 
    - select working direcotory
    - start data taking via runCosmo.py
'''

import sys, os, time, yaml, threading, subprocess
from PyQt5.QtWidgets import QMessageBox

# --> Code generated by designer-qt5

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_CosmoWindow(object):
    def setupUi(self, CosmoWindow):
        CosmoWindow.setObjectName("CosmoWindow")
        CosmoWindow.resize(556, 693)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(CosmoWindow.sizePolicy().hasHeightForWidth())
        CosmoWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(CosmoWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.tab_Main = QtWidgets.QTabWidget(self.centralwidget)
        self.tab_Main.setGeometry(QtCore.QRect(0, 0, 556, 691))
        self.tab_Main.setStatusTip("")
        self.tab_Main.setObjectName("tab_Main")
        self.Tab_Control = QtWidgets.QWidget()
        self.Tab_Control.setWhatsThis("")
        self.Tab_Control.setObjectName("Tab_Control")
        self.label_Picture = QtWidgets.QLabel(self.Tab_Control)
        self.label_Picture.setGeometry(QtCore.QRect(131, 110, 280, 251))
        self.label_Picture.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label_Picture.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_Picture.setText("")
        self.label_Picture.setPixmap(QtGui.QPixmap("images/picoCosmo_iconic.jpg"))
        self.label_Picture.setObjectName("label_Picture")
        self.label_caption = QtWidgets.QLabel(self.Tab_Control)
        self.label_caption.setGeometry(QtCore.QRect(90, 70, 401, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_caption.setFont(font)
        self.label_caption.setObjectName("label_caption")
        self.label_DAQconfig = QtWidgets.QLabel(self.Tab_Control)
        self.label_DAQconfig.setGeometry(QtCore.QRect(10, 419, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Latin Modern Sans")
        font.setPointSize(11)
        self.label_DAQconfig.setFont(font)
        self.label_DAQconfig.setTextFormat(QtCore.Qt.PlainText)
        self.label_DAQconfig.setObjectName("label_DAQconfig")
        self.lE_DAQConfFile = QtWidgets.QLineEdit(self.Tab_Control)
        self.lE_DAQConfFile.setGeometry(QtCore.QRect(110, 420, 371, 32))
        self.lE_DAQConfFile.setText("")
        self.lE_DAQConfFile.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lE_DAQConfFile.setReadOnly(True)
        self.lE_DAQConfFile.setObjectName("lE_DAQConfFile")
        self.label = QtWidgets.QLabel(self.Tab_Control)
        self.label.setGeometry(QtCore.QRect(230, 560, 60, 30))
        font = QtGui.QFont()
        font.setFamily("Latin Modern Sans")
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setTextFormat(QtCore.Qt.PlainText)
        self.label.setObjectName("label")
        self.lE_RunTag = QtWidgets.QLineEdit(self.Tab_Control)
        self.lE_RunTag.setGeometry(QtCore.QRect(300, 560, 113, 31))
        self.lE_RunTag.setObjectName("lE_RunTag")
        self.pB_StartRun = QtWidgets.QPushButton(self.Tab_Control)
        self.pB_StartRun.setGeometry(QtCore.QRect(430, 555, 101, 40))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/start.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_StartRun.setIcon(icon)
        self.pB_StartRun.setIconSize(QtCore.QSize(24, 24))
        self.pB_StartRun.setObjectName("pB_StartRun")
        self.pB_FileSelect = QtWidgets.QPushButton(self.Tab_Control)
        self.pB_FileSelect.setGeometry(QtCore.QRect(490, 420, 31, 34))
        self.pB_FileSelect.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/open-folder.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_FileSelect.setIcon(icon1)
        self.pB_FileSelect.setObjectName("pB_FileSelect")
        self.pB_abort = QtWidgets.QPushButton(self.Tab_Control)
        self.pB_abort.setGeometry(QtCore.QRect(505, 0, 41, 41))
        self.pB_abort.setAccessibleDescription("")
        self.pB_abort.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/application-exit.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_abort.setIcon(icon2)
        self.pB_abort.setIconSize(QtCore.QSize(20, 20))
        self.pB_abort.setAutoDefault(False)
        self.pB_abort.setObjectName("pB_abort")
        self.lE_WorkDir = QtWidgets.QLineEdit(self.Tab_Control)
        self.lE_WorkDir.setGeometry(QtCore.QRect(110, 500, 371, 32))
        self.lE_WorkDir.setReadOnly(True)
        self.lE_WorkDir.setObjectName("lE_WorkDir")
        self.label_WorkDir = QtWidgets.QLabel(self.Tab_Control)
        self.label_WorkDir.setGeometry(QtCore.QRect(23, 506, 81, 20))
        font = QtGui.QFont()
        font.setFamily("Latin Modern Sans")
        font.setPointSize(11)
        self.label_WorkDir.setFont(font)
        self.label_WorkDir.setObjectName("label_WorkDir")
        self.pB_WDselect = QtWidgets.QPushButton(self.Tab_Control)
        self.pB_WDselect.setGeometry(QtCore.QRect(490, 500, 31, 34))
        self.pB_WDselect.setText("")
        self.pB_WDselect.setIcon(icon1)
        self.pB_WDselect.setObjectName("pB_WDselect")
        self.tab_Main.addTab(self.Tab_Control, "")
        self.Tab_Config = QtWidgets.QWidget()
        self.Tab_Config.setObjectName("Tab_Config")
        self.tabWidget = QtWidgets.QTabWidget(self.Tab_Config)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(0, 10, 831, 461))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(811, 0))
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setObjectName("tabWidget")
        self.OsciConfig = QtWidgets.QWidget()
        self.OsciConfig.setObjectName("OsciConfig")
        self.pTE_OsciConfig = QtWidgets.QPlainTextEdit(self.OsciConfig)
        self.pTE_OsciConfig.setGeometry(QtCore.QRect(0, 10, 541, 381))
        self.pTE_OsciConfig.setReadOnly(True)
        self.pTE_OsciConfig.setObjectName("pTE_OsciConfig")
        self.pB_loadPSconf = QtWidgets.QPushButton(self.OsciConfig)
        self.pB_loadPSconf.setGeometry(QtCore.QRect(387, 390, 131, 31))
        self.pB_loadPSconf.setIcon(icon1)
        self.pB_loadPSconf.setObjectName("pB_loadPSconf")
        self.tabWidget.addTab(self.OsciConfig, "")
        self.PulseFilterConfig = QtWidgets.QWidget()
        self.PulseFilterConfig.setObjectName("PulseFilterConfig")
        self.pTE_PFconfig = QtWidgets.QPlainTextEdit(self.PulseFilterConfig)
        self.pTE_PFconfig.setGeometry(QtCore.QRect(0, 10, 541, 381))
        self.pTE_PFconfig.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.pTE_PFconfig.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.pTE_PFconfig.setReadOnly(True)
        self.pTE_PFconfig.setObjectName("pTE_PFconfig")
        self.pB_loadPFconf = QtWidgets.QPushButton(self.PulseFilterConfig)
        self.pB_loadPFconf.setGeometry(QtCore.QRect(384, 390, 131, 30))
        self.pB_loadPFconf.setIcon(icon1)
        self.pB_loadPFconf.setObjectName("pB_loadPFconf")
        self.tabWidget.addTab(self.PulseFilterConfig, "")
        self.BMconfig = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BMconfig.sizePolicy().hasHeightForWidth())
        self.BMconfig.setSizePolicy(sizePolicy)
        self.BMconfig.setObjectName("BMconfig")
        self.pTE_BMconfig = QtWidgets.QPlainTextEdit(self.BMconfig)
        self.pTE_BMconfig.setGeometry(QtCore.QRect(0, 10, 541, 381))
        self.pTE_BMconfig.setReadOnly(True)
        self.pTE_BMconfig.setObjectName("pTE_BMconfig")
        self.pB_loadBMconf = QtWidgets.QPushButton(self.BMconfig)
        self.pB_loadBMconf.setGeometry(QtCore.QRect(387, 390, 131, 31))
        self.pB_loadBMconf.setIcon(icon1)
        self.pB_loadBMconf.setObjectName("pB_loadBMconf")
        self.tabWidget.addTab(self.BMconfig, "")
        self.rB_EditMode = QtWidgets.QRadioButton(self.Tab_Config)
        self.rB_EditMode.setGeometry(QtCore.QRect(420, 15, 91, 30))
        self.rB_EditMode.setObjectName("rB_EditMode")
        self.pB_SaveConfig = QtWidgets.QPushButton(self.Tab_Config)
        self.pB_SaveConfig.setGeometry(QtCore.QRect(200, 620, 111, 30))
        self.pB_SaveConfig.setObjectName("pB_SaveConfig")
        self.pTE_DAQConfig = QtWidgets.QPlainTextEdit(self.Tab_Config)
        self.pTE_DAQConfig.setGeometry(QtCore.QRect(10, 493, 531, 120))
        self.pTE_DAQConfig.setReadOnly(True)
        self.pTE_DAQConfig.setObjectName("pTE_DAQConfig")
        self.pB_ReloadConfig = QtWidgets.QPushButton(self.Tab_Config)
        self.pB_ReloadConfig.setEnabled(False)
        self.pB_ReloadConfig.setGeometry(QtCore.QRect(419, 609, 111, 31))
        self.pB_ReloadConfig.setObjectName("pB_ReloadConfig")
        self.tab_Main.addTab(self.Tab_Config, "")
        self.Tab_Help = QtWidgets.QWidget()
        self.Tab_Help.setObjectName("Tab_Help")
        self.TE_Help = QtWidgets.QTextEdit(self.Tab_Help)
        self.TE_Help.setGeometry(QtCore.QRect(11, 26, 531, 621))
        self.TE_Help.setUndoRedoEnabled(False)
        self.TE_Help.setReadOnly(True)
        self.TE_Help.setPlaceholderText("")
        self.TE_Help.setObjectName("TE_Help")
        self.pB_Help = QtWidgets.QPushButton(self.Tab_Help)
        self.pB_Help.setGeometry(QtCore.QRect(10, 0, 88, 31))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/flagUK.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_Help.setIcon(icon3)
        self.pB_Help.setObjectName("pB_Help")
        self.pB_Hilfe = QtWidgets.QPushButton(self.Tab_Help)
        self.pB_Hilfe.setGeometry(QtCore.QRect(110, 0, 88, 31))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/flagDE.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_Hilfe.setIcon(icon4)
        self.pB_Hilfe.setObjectName("pB_Hilfe")
        self.tab_Main.addTab(self.Tab_Help, "")
        CosmoWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(CosmoWindow)
        self.tab_Main.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(CosmoWindow)

    def retranslateUi(self, CosmoWindow):
        _translate = QtCore.QCoreApplication.translate
        CosmoWindow.setWindowTitle(_translate("CosmoWindow", "CosmoGui"))
        self.tab_Main.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Output  / Configuration / Help</p></body></html>"))
        self.Tab_Control.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Control Panel</p></body></html>"))
        self.label_caption.setText(_translate("CosmoWindow", "Kamiokanne & CosMO Detector with PicoScope"))
        self.label_DAQconfig.setText(_translate("CosmoWindow", "DAQ config:"))
        self.lE_DAQConfFile.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>DAQ configuration file (type .daq)</p></body></html>"))
        self.label.setText(_translate("CosmoWindow", "Run Tag:"))
        self.lE_RunTag.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Name for the run</p></body></html>"))
        self.lE_RunTag.setText(_translate("CosmoWindow", "CosmoRun"))
        self.pB_StartRun.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Start Runinng Oscilloscope, Buffer Manager and Pulse Filter</p></body></html>"))
        self.pB_StartRun.setText(_translate("CosmoWindow", "  StartRun"))
        self.pB_FileSelect.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>selecd daq configuration file</p></body></html>"))
        self.pB_abort.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Exit CosmoGui</p></body></html>"))
        self.label_WorkDir.setText(_translate("CosmoWindow", "Work Dir:"))
        self.pB_WDselect.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>select working directory (where ouput is stored)</p></body></html>"))
        self.tab_Main.setTabText(self.tab_Main.indexOf(self.Tab_Control), _translate("CosmoWindow", "Control"))
        self.Tab_Config.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Config Panel</p></body></html>"))
        self.tabWidget.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Configuration Files</p></body></html>"))
        self.pTE_OsciConfig.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Configuration File for Oscilloscope</p></body></html>"))
        self.pB_loadPSconf.setToolTip(_translate("CosmoWindow", "Load PicoScope configuration"))
        self.pB_loadPSconf.setText(_translate("CosmoWindow", "load PS config"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.OsciConfig), _translate("CosmoWindow", "Oscilloscope"))
        self.pTE_PFconfig.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Configuration File for Pulse Filter and Analysis</p></body></html>"))
        self.pB_loadPFconf.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Load PulseFilter configuration from File</p></body></html>"))
        self.pB_loadPFconf.setText(_translate("CosmoWindow", "load PF config"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.PulseFilterConfig), _translate("CosmoWindow", "PulseFilter"))
        self.pTE_BMconfig.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Configuration File for Buffer Manager</p></body></html>"))
        self.pB_loadBMconf.setToolTip(_translate("CosmoWindow", "Load Buffer Manager configuration"))
        self.pB_loadBMconf.setText(_translate("CosmoWindow", "load BM config"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.BMconfig), _translate("CosmoWindow", "BufferManager"))
        self.rB_EditMode.setText(_translate("CosmoWindow", "Edit Mode"))
        self.pB_SaveConfig.setToolTip(_translate("CosmoWindow", "Save as default configuration"))
        self.pB_SaveConfig.setText(_translate("CosmoWindow", "Save all configs"))
        self.pTE_DAQConfig.setToolTip(_translate("CosmoWindow", "DAQ configuration: list of configuration filenames"))
        self.pB_ReloadConfig.setText(_translate("CosmoWindow", "Reload configs"))
        self.tab_Main.setTabText(self.tab_Main.indexOf(self.Tab_Config), _translate("CosmoWindow", "Configuration"))
        self.Tab_Help.setToolTip(_translate("CosmoWindow", "<html><head/><body><p>Info &amp; Help</p></body></html>"))
        self.pB_Help.setText(_translate("CosmoWindow", "English"))
        self.pB_Hilfe.setText(_translate("CosmoWindow", "Deutsch"))
        self.tab_Main.setTabText(self.tab_Main.indexOf(self.Tab_Help), _translate("CosmoWindow", "Help / Hilfe"))


# <-- end of  code generated by desitner-qt5

# # # # # # # # # # # # # # # # # # # # # # # # 

# --> own implementation starts here --> 

    def MB_Question(self, Title, Text):
    # wrapper for QMessageBox Question yes/abort
      msg = QMessageBox()
      msg.setIcon(QMessageBox.Question)
      msg.setWindowTitle(Title)
      msg.setText(Text)       
      msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
      return msg.exec_()

    def MB_Info(self, Title, Text):
    # wrapper for QMessageBox Info
      msg = QMessageBox()
      msg.setIcon(QMessageBox.Information)
      msg.setWindowTitle(Title)
      msg.setText(Text)       
      msg.setStandardButtons(QMessageBox.Ok)
      return msg.exec_()

    def MB_Warning(self, Title, Text):
    # wrapper for QMessageBox Info
      msg = QMessageBox()
      msg.setIcon(QMessageBox.Warning)
      msg.setWindowTitle(Title)
      msg.setText(Text)       
      msg.setStandardButtons(QMessageBox.Ok)
      return msg.exec_()

    def init(self, Window, DAQconfFile):
      self.Window = Window

# set display options, fonts etc.
      self.setOptions()

# set help 
      self.setHelp_EN()

# find user home directory and create directory 'picoCosmo' 
      self.homedir = os.getenv('HOME')
      self.ConfDir = self.homedir + '/picoCosmo' 
      if not os.path.exists(self.ConfDir): 
        os.makedirs(self.ConfDir)

# set initial working Directory
      self.WDname = self.ConfDir 
      self.lE_WorkDir.setText(self.WDname)

# define actions
      self.pB_abort.clicked.connect(QtCore.QCoreApplication.instance().quit) 
      self.rB_EditMode.clicked.connect(self.actionEditConfig) 
      self.pB_StartRun.clicked.connect(self.actionStartRun) 
      self.pB_FileSelect.clicked.connect(self.selectConfigFile)
      self.pB_WDselect.clicked.connect(self.selectWD)
      self.pB_Help.clicked.connect(self.setHelp_EN)
      self.pB_Hilfe.clicked.connect(self.setHelp_DE)
      self.pB_SaveConfig.clicked.connect(self.saveDefaultConfig)
      self.pB_ReloadConfig.clicked.connect(self.reloadConfigs)
      self.pB_loadPSconf.clicked.connect(self.loadPSconf)
      self.pB_loadBMconf.clicked.connect(self.loadBMconf)
      self.pB_loadPFconf.clicked.connect(self.loadPFconf)

# initialization dependent on DAQ config file
      self.initDAQ(DAQconfFile)

    def readConfigs(self, DAQconfD):  
      # read configuration options from file names in DAQ config dictionary

      if "DeviceFile" in DAQconfD: 
        self.PSfile = DAQconfD["DeviceFile"] # configuration file for scope
      else:
        self.MB_Warning('Warning', 
                   'no device configuration file - exiting')
        print('     no device configuration file - exiting')
        exit(1)

      if "BMfile" in DAQconfD: 
        self.BMfile = DAQconfD["BMfile"] # Buffer Manager configuration file 
      else:
        self.MB_Warning('Warning', 
                   'no BM configuration file - exiting')
        print('     no BM configuration file - exiting')
        exit(1)

      if "PFfile" in DAQconfD: 
        self.PFfile = DAQconfD["PFfile"] # Buffer Manager configuration file 
      else:
        self.MB_Warning('Warning', 
                   'no pulse filter configuration file - exiting')
        print('     no pulse filter configuration file - exiting')
        exit(1)

   # display config data in GUI
      self.pTE_OsciConfig.setPlainText(open(self.iwd + '/' + self.PSfile, 'r').read() )
      self.pTE_BMconfig.setPlainText(open(self.iwd + '/' + self.BMfile, 'r').read() )
      self.pTE_PFconfig.setPlainText(open(self.iwd + '/' + self.PFfile, 'r').read() )


    def initDAQ(self, DAQconfFile):
      # initialize DAQ from config files - need absolute path
      path = os.path.dirname(DAQconfFile)
      if path == '': path = '.'
      self.iwd = path    # initial working direcotory 

      try:
        with open(DAQconfFile) as f:
          DAQconf = f.read()
      except Exception as e:
        self.MB_Warning('Warning', 
          'failed to read DAQ configuration file ' + DAQconfFile +'\n' + str(e)) 
        print('     failed to read DAQ configuration file ' + DAQconfFile)
        exit(1)

      try:
        DAQconfdict=yaml.load(DAQconf)
      except Exception as e:
        self.MB_Warning('Warning', 
          'DAQ configuration not valid yaml format ' + DAQconfFile +'\n' + str(e) ) 
        print('     DAQ configuration not valid yaml format' + DAQconfFile)
        exit(1)

      self.lE_DAQConfFile.setText(DAQconfFile)
      print('   - DAQ configuration from file ' + DAQconfFile)

      # display config in GUI
      self.pTE_DAQConfig.setPlainText(DAQconf)
      # read configurations from DAQ dictionary
      self.readConfigs(DAQconfdict)

# - end iniDAQ

    def reloadConfigs(self):
    # reload configs after edits in DAQconfig
      # retrieve actual configuration from GUI
      DAQconf = self.pTE_DAQConfig.toPlainText() 
      # check if valid yaml syntax
      try:
        DAQconfDict = yaml.load(DAQconf)
      except Exception as e:
        self.MB_Warning('Warning', 
          'DAQ config is not valid yaml format \n' + str(e) )       
        return 1
      self.readConfigs(DAQconfDict)

    def setOptions(self):
# set font for plainTextEdit to monospace
      monofont = QtGui.QFont()
      monofont.setStyleHint(QtGui.QFont.TypeWriter)
      monofont.setFamily("unexistentfont")        
      self.pTE_OsciConfig.setFont(monofont)
      self.pTE_BMconfig.setFont(monofont)
      self.pTE_PFconfig.setFont(monofont)

    def setHelp_DE(self):
      self.TE_Help.setText(open('doc/Hilfe.html', 'r').read() ) 

    def setHelp_EN(self):
      self.TE_Help.setText(open('doc/help.html', 'r').read() )

    def loadPSconf(self):
      path2File = QtWidgets.QFileDialog.getOpenFileName(None,
       'Picoscope config', self.iwd, 'yaml(*.yaml)')
      FileName = str(path2File[0]).strip()
      if FileName is not '' :
        # print('selected File ' + str(FileName) )
        self.pTE_OsciConfig.setPlainText(open(FileName, 'r').read() )

    def loadBMconf(self):
      path2File = QtWidgets.QFileDialog.getOpenFileName(None,
       'Buffer Manager config', self.iwd, 'yaml(*.yaml)')
      FileName = str(path2File[0]).strip()
      if FileName is not '' :
        # print('selected File ' + str(FileName) )
        self.pTE_BMconfig.setPlainText(open(FileName, 'r').read() )

    def loadPFconf(self):
      path2File = QtWidgets.QFileDialog.getOpenFileName(None,
       'Pulse Filter config', self.iwd, 'yaml(*.yaml)')
      FileName = str(path2File[0]).strip()
      if FileName is not '' :
        # print('selected File ' + str(FileName) )
        self.pTE_PFconfig.setPlainText(open(FileName, 'r').read() )

    def selectConfigFile(self):
      path2File = QtWidgets.QFileDialog.getOpenFileName(None,
         'DAQ config', './', 'DAQ(*.daq)')
      FileName = str(path2File[0]).strip()
      if FileName is not '' :
        # print('selected File ' + str(FileName) )
        self.initDAQ(FileName)

    def selectWD(self):
      path2WD = QtWidgets.QFileDialog.getExistingDirectory(None, '~')
      WDname = str(path2WD).strip()
      if WDname is not '' :
        # print('selected Directory' + WDname )
         self.lE_WorkDir.setText(WDname)
         self.WDname = WDname

    def actionEditConfig(self):
        checked = self.rB_EditMode.isChecked()
        self.pTE_DAQConfig.setReadOnly(not checked)
        self.pB_ReloadConfig.setEnabled(checked)
        self.pTE_OsciConfig.setReadOnly(not checked)
        self.pTE_BMconfig.setReadOnly(not checked)
        self.pTE_PFconfig.setReadOnly(not checked)

    def saveDefaultConfig(self):
        self.saveConfig(self.ConfDir)

    def saveConfig(self, confdir):
      # save configuration in ~/picoCosmo
        
        # retrieve actual configuration from GUI
        DAQconf = self.pTE_DAQConfig.toPlainText() 
        # check if valid yaml syntax
        try:
          DAQconfDict = yaml.load(DAQconf)
        except Exception as e:
          self.MB_Warning('Warning', 
                          'DAQ config is not valid yaml format \n' + str(e) )       
          return 1

        PSconf = self.pTE_OsciConfig.toPlainText() 
        # check if valid yaml syntax
        try:
          d = yaml.load(PSconf)
        except Exception as e:
          self.MB_Warning('Warning', 
            'PicoScope config is not valid yaml format\n' + str(e) )       
          return 1

        BMconf = self.pTE_BMconfig.toPlainText() 
        try:
          d = yaml.load(BMconf)
        except Exception as e:
          self.MB_Warning('Warning', 
            'Buffer Manager config is not valid yaml format \n'+ str(e) )       
          return 1

        PFconf = self.pTE_PFconfig.toPlainText() 
        try:
          d = yaml.load(PFconf)
        except Exception as e:
          self.MB_Warning('Warning', 
            'Pulse Filter config is not valid yaml format \n' + str(e) )       
          return 1

        # generate file name from RunTag 
        RunTag = str(self.lE_RunTag.text() ).replace(' ','')
        DAQfile= RunTag + '.daq'
        fullDAQfile = confdir + '/' + RunTag + '.daq'
        retval = self.MB_Question('Question', 
           'saving Config to file ' + fullDAQfile)       
        if retval == QMessageBox.Cancel: return 1
        fDAQ = open(fullDAQfile, 'w')
        print(DAQconf, file = fDAQ )
        self.DAQfile = DAQfile
        fDAQ.close()     

        # store all other configuration files   

        fnam = DAQconfDict['DeviceFile']
        dir, fn = os.path.split(fnam)
        if dir != '': 
          if not os.path.exists(confdir + '/' + dir):
            os.makedirs(confdir + '/' + dir) 
        fPS = open(confdir + '/' + fnam, 'w')
        print(PSconf, file = fPS )
        fPS.close()

        fnam = DAQconfDict['BMfile']
        dir, fn = os.path.split(fnam)
        if dir != '': 
          if not os.path.exists(confdir + '/' + dir):
            os.makedirs(confdir + '/' + dir) 
        fBM = open(confdir + '/' + fnam, 'w')
        print(BMconf, file = fBM )
        fBM.close()

        fnam = DAQconfDict['PFfile']
        dir, fn = os.path.split(fnam)
        if dir != '': 
          if not os.path.exists(confdir + '/' + dir):
            os.makedirs(confdir + '/' + dir) 
        fPF = open(confdir + '/' + fnam, 'w')
        print(PFconf, file = fPF )
        fPF.close()

    def actionStartRun(self):
      # start script runCosmo.py in subdirectory

      # time stamp for this run
      datetime=time.strftime('%y%m%d-%H%M', time.localtime())
      RunTag = str(self.lE_RunTag.text() ).replace(' ','')

      # generate config files for new run in dedicated subdirectory
      self.runDir = (RunTag + '_' + datetime)
      self.path_to_WD = self.WDname + '/' + self.runDir
      if not os.path.exists(self.path_to_WD): 
        os.makedirs(self.path_to_WD)
      # store config in working directory 
      if self.saveConfig(self.path_to_WD): return
      print("   - files for this run stored in directory " + self.path_to_WD) 

    # close GUI window and start runCosmo 
      print('\n*==* CosmoGui: closing window and starting runCosmo.py')
      self.Window.close()

      # start runCosmo
      self.start_runCosmo()

      QtCore.QCoreApplication.instance().quit()
      print('*==* CosmoGui: exit \n')
              
    def start_runCosmo(self):
        CosmoDir = os.getcwd()
        subprocess.call([CosmoDir + '/runCosmo.py ' + self.DAQfile],
                      cwd = self.WDname + '/' + self.runDir, shell = True)
        
# - end Class Ui_CosmoWindow

def runCosmoUi():
    
  script = sys.argv[0]
  print('\n*==* ' + script + ' running \n')

  # get relevant paths
  path_to_picoCosmo = os.path.dirname(script)
  homedir = os.getenv('HOME')

# check for / read command line arguments
  # get DAQ configuration file
  if len(sys.argv)==2:
    DAQconfFile = os.path.abspath(sys.argv[1]) # with full path to file
    print (DAQconfFile)
  elif os.path.exists(homedir + '/picoCosmo/default.daq'): 
    DAQconfFile = homedir + '/picoCosmo/default.daq'
  else:
    DAQconfFile = 'default.daq'

# start GUI
  if path_to_picoCosmo!= '':
    os.chdir(path_to_picoCosmo) # change path to where CosmoGui lives
  app = QtWidgets.QApplication(sys.argv)
  MainWindow = QtWidgets.QMainWindow()
  ui = Ui_CosmoWindow()
  ui.setupUi(MainWindow)

# call initialization
  ui.init(MainWindow, DAQconfFile)

# start pyqt event loop
  MainWindow.show()
  sys.exit(app.exec_())

if __name__ == "__main__": # - - - - - - - - - - - - - - - - - - - -
  runCosmoUi()
